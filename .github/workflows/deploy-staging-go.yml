name: Deploy to Staging (Go)

# Trigger strategies (choose one or combine):
# 1. Automatic: On push to develop branch (continuous staging deployment)
# 2. Manual: Via workflow_dispatch (on-demand staging deployment)
# 3. PR-based: On label 'deploy-to-staging' added to PR
on:
  # Strategy 1: Automatic deployment on develop branch push (Go changes only)
  push:
    branches:
      - develop
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'Taskfile-go.yml'
      - 'Containerfile.go'
      - '.golangci.yml'

  # Strategy 2: Manual deployment trigger
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to deploy (branch, tag, or SHA)'
        required: false
        default: 'develop'
      skip_tests:
        description: 'Skip validation tests (use with caution)'
        required: false
        type: boolean
        default: false

  # Strategy 3: PR-based deployment (when label added)
  pull_request:
    types:
      - labeled
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'

# Cancel in-progress staging deployments on new push
concurrency:
  group: staging-deployment-go
  cancel-in-progress: true

env:
  GO_VERSION: '1.21'

jobs:
  # Only run if triggered by push to develop, manual dispatch, or 'deploy-to-staging' label
  check-trigger:
    name: Validate Deployment Trigger
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.deploy }}
    steps:
      - name: Check deployment conditions
        id: check
        run: |
          DEPLOY="false"

          # Allow push to develop
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            DEPLOY="true"
            echo "Trigger: Push to develop branch (Go changes)"
          fi

          # Allow manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            DEPLOY="true"
            echo "Trigger: Manual workflow dispatch"
          fi

          # Allow PR with 'deploy-to-staging' label
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            LABELS='${{ toJSON(github.event.pull_request.labels.*.name) }}'
            if echo "$LABELS" | grep -q "deploy-to-staging"; then
              DEPLOY="true"
              echo "Trigger: PR labeled 'deploy-to-staging'"
            fi
          fi

          echo "deploy=$DEPLOY" >> $GITHUB_OUTPUT

          if [ "$DEPLOY" = "false" ]; then
            echo "❌ Deployment conditions not met - skipping"
          else
            echo "✅ Deployment conditions met - proceeding"
          fi

  # Run validation tests before staging deployment
  validate:
    name: Run Validation Tests
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should_deploy == 'true' && !inputs.skip_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Install dependencies
        run: task --taskfile Taskfile-go.yml deps:install

      - name: Run quick validation suite
        run: |
          echo "Running validation tests before staging deployment..."
          task --taskfile Taskfile-go.yml lint
          task --taskfile Taskfile-go.yml type-check
          task --taskfile Taskfile-go.yml test:unit

  # Build and push staging container image
  build-and-push:
    name: Build and Push Staging Container
    runs-on: ubuntu-latest
    needs: [check-trigger, validate]
    if: |
      always() &&
      needs.check-trigger.outputs.should_deploy == 'true' &&
      (needs.validate.result == 'success' || needs.validate.result == 'skipped')
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version and metadata
        id: meta
        run: |
          # Extract version from go.mod or use semantic versioning
          VERSION=$(grep '^module ' go.mod | awk '{print $2}' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "0.1.0")
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

          # Staging tag format: staging-go-v{version}-{timestamp}-{short-sha}
          STAGING_TAG="staging-go-v${VERSION}-${TIMESTAMP}-${SHORT_SHA}"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "staging_tag=$STAGING_TAG" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

          echo "Staging Image Tags:"
          echo "  - ghcr.io/${{ github.repository }}:$STAGING_TAG"
          echo "  - ghcr.io/${{ github.repository }}:staging-go-latest"

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Build container image using Taskfile
        id: build
        run: |
          # Build using Taskfile (uses Containerfile.go)
          task --taskfile Taskfile-go.yml container:build TAG=${{ steps.meta.outputs.staging_tag }}

          # Tag for registry
          docker tag ai-agent-mcp-server-go:${{ steps.meta.outputs.staging_tag }} ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.staging_tag }}
          docker tag ai-agent-mcp-server-go:${{ steps.meta.outputs.staging_tag }} ghcr.io/${{ github.repository }}:staging-go-latest

          # Rebuild with OCI labels
          docker build --label org.opencontainers.image.title="AI Agent MCP Server (Staging - Go)" \
            --label org.opencontainers.image.description="Staging deployment of AI Agent MCP Server (Go)" \
            --label org.opencontainers.image.version="${{ steps.meta.outputs.version }}" \
            --label org.opencontainers.image.revision="${{ github.sha }}" \
            --label org.opencontainers.image.created="${{ steps.meta.outputs.timestamp }}" \
            --label environment=staging \
            --label language=go \
            --cache-from ghcr.io/${{ github.repository }}:staging-go-latest \
            -t ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.staging_tag }} \
            -t ghcr.io/${{ github.repository }}:staging-go-latest \
            -f Containerfile.go .

      - name: Push images to registry
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.staging_tag }}
          docker push ghcr.io/${{ github.repository }}:staging-go-latest

          # Capture digest
          DIGEST=$(docker inspect ghcr.io/${{ github.repository }}:staging-go-latest --format='{{index .RepoDigests 0}}' | cut -d'@' -f2 || echo "unknown")
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Image build summary
        run: |
          echo "✅ Staging container image built and pushed successfully"
          echo ""
          echo "**Registry:** ghcr.io/${{ github.repository }}"
          echo "**Tags:**"
          echo "  - ${{ steps.meta.outputs.staging_tag }}"
          echo "  - staging-go-latest"
          echo "**Digest:** ${{ steps.build.outputs.digest }}"

  # Security scan staging image
  security-scan:
    name: Scan Staging Container
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:staging-go-latest'
          format: 'sarif'
          output: 'trivy-staging-go-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'  # Don't fail staging on vulnerabilities (warn only)
          ignore-unfixed: true
          trivyignores: '.trivyignore'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-staging-go-results.sarif'
          category: 'staging-container-go'

      - name: Security scan summary
        run: |
          echo "Security scan completed for staging image (Go)"
          echo "View results: https://github.com/${{ github.repository }}/security/code-scanning"

  # Post-deployment validation (smoke tests)
  smoke-tests:
    name: Run Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for staging deployment
        run: |
          echo "Waiting for staging deployment to stabilize..."
          sleep 30

      - name: Run local smoke tests
        run: |
          echo "Starting staging container for smoke tests..."

          # Pull staging image
          docker pull ghcr.io/${{ github.repository }}:staging-go-latest

          # Run container with test environment
          docker run -d \
            --name mcp-staging-go-smoke-test \
            -p 8080:8080 \
            -e APP_NAME="AI Agent MCP Server (Go)" \
            -e APP_VERSION="0.1.0" \
            -e DEBUG=false \
            -e HOST=0.0.0.0 \
            -e PORT=8080 \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            -e LOG_LEVEL=INFO \
            -e LOG_FORMAT=json \
            ghcr.io/${{ github.repository }}:staging-go-latest

          # Wait for application to start
          sleep 15

          # Health check
          echo "Testing health endpoint..."
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health || echo "000")

          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "✅ Health check passed (HTTP $HEALTH_STATUS)"
          else
            echo "❌ Health check failed (HTTP $HEALTH_STATUS)"
            echo "Container logs:"
            docker logs mcp-staging-go-smoke-test
            exit 1
          fi

          # Cleanup
          docker stop mcp-staging-go-smoke-test
          docker rm mcp-staging-go-smoke-test

  # Deployment summary and notification
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, smoke-tests]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          BUILD_STATUS="${{ needs.build-and-push.result }}"
          SCAN_STATUS="${{ needs.security-scan.result }}"
          SMOKE_STATUS="${{ needs.smoke-tests.result }}"

          if [ "$BUILD_STATUS" = "success" ] && [ "$SCAN_STATUS" = "success" ] && [ "$SMOKE_STATUS" = "success" ]; then
            echo "## ✅ Staging Deployment Successful (Go)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** Staging (Go)" >> $GITHUB_STEP_SUMMARY
            echo "**Image:** ghcr.io/${{ github.repository }}:staging-go-latest" >> $GITHUB_STEP_SUMMARY
            echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Container Build | ✅ Success |" >> $GITHUB_STEP_SUMMARY
            echo "| Security Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            echo "| Smoke Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Staging Deployment Failed (Go)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Container Build | $( [ "$BUILD_STATUS" = "success" ] && echo '✅' || echo '❌' ) $BUILD_STATUS |" >> $GITHUB_STEP_SUMMARY
            echo "| Security Scan | $( [ "$SCAN_STATUS" = "success" ] && echo '✅' || echo '❌' ) $SCAN_STATUS |" >> $GITHUB_STEP_SUMMARY
            echo "| Smoke Tests | $( [ "$SMOKE_STATUS" = "success" ] && echo '✅' || echo '❌' ) $SMOKE_STATUS |" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
