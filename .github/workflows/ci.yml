name: CI/CD Pipeline

# Trigger on feature branch pushes, release branches, and PRs to main
on:
  push:
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'chore/**'
      - 'release/**'
  pull_request:
    branches:
      - main

# Cancel in-progress runs on new push to same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup job - installs dependencies and caches for downstream jobs
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --all-extras --frozen

      - name: Cache pytest cache
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: pytest-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            pytest-${{ runner.os }}-

      - name: Cache mypy cache
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            mypy-${{ runner.os }}-

      - name: Cache Ruff cache
        uses: actions/cache@v4
        with:
          path: .ruff_cache
          key: ruff-${{ runner.os }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ruff-${{ runner.os }}-

  # Containerfile linting job
  lint-containerfile:
    name: Containerfile Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Containerfile
          failure-threshold: error
          ignore: DL3008,DL4006  # Ignore version pinning and pipefail warnings

  # Lint and format validation job
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Restore UV cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Restore Ruff cache
        uses: actions/cache@v4
        with:
          path: .ruff_cache
          key: ruff-${{ runner.os }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ruff-${{ runner.os }}-

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Install dependencies
        run: |
          uv sync --all-extras --frozen

      - name: Run linting checks
        run: |
          ~/.local/bin/task lint

      - name: Run format checks
        run: |
          ~/.local/bin/task format:check

  # Type checking validation job
  type-check:
    name: Type Safety Validation
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Restore UV cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Restore mypy cache
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            mypy-${{ runner.os }}-

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Install dependencies
        run: |
          uv sync --all-extras --frozen

      - name: Run type checking
        run: |
          ~/.local/bin/task type-check

  # Test execution and coverage validation job
  test-and-coverage:
    name: Test Execution and Coverage
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Restore UV cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Restore pytest cache
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: pytest-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            pytest-${{ runner.os }}-

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Install dependencies
        run: |
          uv sync --all-extras --frozen

      - name: Run tests with coverage
        run: |
          ~/.local/bin/task test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml

  # Report job - aggregates results and posts to PR
  report:
    name: Build Status Report
    runs-on: ubuntu-latest
    needs: [lint-containerfile, lint-and-format, type-check, test-and-coverage, build-container]
    if: always()
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Check job results
        run: |
          if [ "${{ needs.lint-containerfile.result }}" != "success" ] || \
             [ "${{ needs.lint-and-format.result }}" != "success" ] || \
             [ "${{ needs.type-check.result }}" != "success" ] || \
             [ "${{ needs.test-and-coverage.result }}" != "success" ] || \
             [ "${{ needs.build-container.result }}" != "success" ]; then
            echo "❌ Build failed - one or more validation jobs failed"
            echo "- Containerfile Validation: ${{ needs.lint-containerfile.result }}"
            echo "- Lint and Format: ${{ needs.lint-and-format.result }}"
            echo "- Type Check: ${{ needs.type-check.result }}"
            echo "- Test and Coverage: ${{ needs.test-and-coverage.result }}"
            echo "- Container Build: ${{ needs.build-container.result }}"
            exit 1
          else
            echo "✅ Build passed - all validation jobs succeeded"
          fi

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage-reports/

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const containerfileResult = '${{ needs.lint-containerfile.result }}';
            const lintResult = '${{ needs.lint-and-format.result }}';
            const typeResult = '${{ needs.type-check.result }}';
            const testResult = '${{ needs.test-and-coverage.result }}';
            const containerBuildResult = '${{ needs.build-container.result }}';

            const allPassed = containerfileResult === 'success' && lintResult === 'success' &&
                             typeResult === 'success' && testResult === 'success' &&
                             containerBuildResult === 'success';

            const status = allPassed ? '✅ Build Passed' : '❌ Build Failed';

            // Show push status in container build result
            const isReleaseBranch = '${{ github.ref }}'.startsWith('refs/heads/release/');
            const containerNote = isReleaseBranch ? ' (pushed to registry)' : ' (build only)';

            const body = `## ${status}

            | Job | Status |
            |-----|--------|
            | Containerfile Validation | ${containerfileResult === 'success' ? '✅' : '❌'} |
            | Code Quality Checks | ${lintResult === 'success' ? '✅' : '❌'} |
            | Type Safety Validation | ${typeResult === 'success' ? '✅' : '❌'} |
            | Test Execution and Coverage | ${testResult === 'success' ? '✅' : '❌'} |
            | Container Build | ${containerBuildResult === 'success' ? '✅' + containerNote : '❌'} |

            **Note:** Container images are pushed to registry only on \`release/*\` branches.

            [View detailed logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Container build and push job - builds on all branches, pushes only on release branches
  build-container:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    needs: [lint-containerfile, lint-and-format, type-check, test-and-coverage]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: startsWith(github.ref, 'refs/heads/release/') && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Containerfile
          push: ${{ startsWith(github.ref, 'refs/heads/release/') && github.event_name == 'push' }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image build summary
        run: |
          if [[ "${{ github.ref }}" == refs/heads/release/* ]] && [ "${{ github.event_name }}" = "push" ]; then
            echo "✅ Container image built and pushed successfully"
            echo "Registry: ghcr.io/${{ github.repository }}"
            echo "Tags:"
            echo "  - latest"
            echo "  - ${{ steps.version.outputs.version }}"
            echo "  - ${{ github.sha }}"
          else
            echo "✅ Container image built successfully (not pushed - not a release branch)"
            echo "Build verified - image will be pushed on release branch"
          fi
